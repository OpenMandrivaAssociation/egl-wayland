From 3ead05d4587991b75dc704444b1b1365c08af5ce Mon Sep 17 00:00:00 2001
From: Erik Kurzinger <ekurzinger@nvidia.com>
Date: Fri, 14 Jul 2023 14:07:25 -0700
Subject: [PATCH] egl-wayland: destroy all proxies before destroying their
 queues

The latest version of libwayland-client.so will print a warning if a
queue is destroyed while a proxy is still assigned to it. This warning
is triggered during EGL termination by our linux_dmabuf object and the
default dmabuf feedback object for the display. It is also triggered
during EGLSurface destruction by the surface's dmabuf feedback object.
That last object never gets destroyed at all, in fact.

This change ensures that the above objects are all destroyed *before*
their queues.
---
 include/wayland-egldisplay.h |  1 +
 src/wayland-egldisplay.c     | 17 +++++++++--------
 src/wayland-eglsurface.c     |  4 ++++
 3 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/include/wayland-egldisplay.h b/include/wayland-egldisplay.h
index 4fe0418..e038668 100644
--- a/include/wayland-egldisplay.h
+++ b/include/wayland-egldisplay.h
@@ -186,6 +186,7 @@ typedef struct WlEventQueueRec {
 } WlEventQueue;
 
 int WlEglRegisterFeedback(WlEglDmaBufFeedback *feedback);
+void wlEglDestroyFeedback(WlEglDmaBufFeedback *feedback);
 EGLBoolean wlEglIsValidNativeDisplayExport(void *data, void *nativeDpy);
 EGLBoolean wlEglBindDisplaysHook(void *data, EGLDisplay dpy, void *nativeDpy);
 EGLBoolean wlEglUnbindDisplaysHook(EGLDisplay dpy, void *nativeDpy);
diff --git a/src/wayland-egldisplay.c b/src/wayland-egldisplay.c
index 3907892..3e7d74e 100644
--- a/src/wayland-egldisplay.c
+++ b/src/wayland-egldisplay.c
@@ -144,7 +144,7 @@ typedef caddr_t pointer_t;
 typedef void *pointer_t;
 #endif
 
-static void
+void
 wlEglDestroyFeedback(WlEglDmaBufFeedback *feedback)
 {
     wlEglFeedbackResetTranches(feedback);
@@ -619,6 +619,9 @@ static EGLBoolean terminateDisplay(WlEglDisplay *display, EGLBoolean globalTeard
      * destroy the display connection itself */
     wlEglDestroyAllSurfaces(display);
 
+    wlEglDestroyFormatSet(&display->formatSet);
+    wlEglDestroyFeedback(&display->defaultFeedback);
+
     if (!globalTeardown || display->ownNativeDpy) {
         if (display->wlRegistry) {
             wl_registry_destroy(display->wlRegistry);
@@ -636,19 +639,17 @@ static EGLBoolean terminateDisplay(WlEglDisplay *display, EGLBoolean globalTeard
             wp_presentation_destroy(display->wpPresentation);
             display->wpPresentation = NULL;
         }
-        if (display->wlEventQueue) {
-            wl_event_queue_destroy(display->wlEventQueue);
-            display->wlEventQueue = NULL;
-        }
         if (display->wlDmaBuf) {
             zwp_linux_dmabuf_v1_destroy(display->wlDmaBuf);
             display->wlDmaBuf = NULL;
         }
+        /* all proxies using the queue must be destroyed first! */
+        if (display->wlEventQueue) {
+            wl_event_queue_destroy(display->wlEventQueue);
+            display->wlEventQueue = NULL;
+        }
     }
 
-    wlEglDestroyFormatSet(&display->formatSet);
-    wlEglDestroyFeedback(&display->defaultFeedback);
-
     return EGL_TRUE;
 }
 
diff --git a/src/wayland-eglsurface.c b/src/wayland-eglsurface.c
index decde98..7b9ddd7 100644
--- a/src/wayland-eglsurface.c
+++ b/src/wayland-eglsurface.c
@@ -2149,6 +2149,8 @@ static EGLBoolean wlEglDestroySurface(EGLDisplay dpy, EGLSurface eglSurface)
         free(surface->attribs);
     }
 
+    wlEglDestroyFeedback(&surface->feedback);
+
     if (surface->presentFeedbackQueue != NULL) {
         wl_event_queue_destroy(surface->presentFeedbackQueue);
         surface->presentFeedbackQueue = NULL;
@@ -2157,6 +2159,8 @@ static EGLBoolean wlEglDestroySurface(EGLDisplay dpy, EGLSurface eglSurface)
         wl_callback_destroy(surface->throttleCallback);
         surface->throttleCallback = NULL;
     }
+
+    /* all proxies using the queue must be destroyed first! */
     if (surface->wlEventQueue != NULL) {
         wl_event_queue_destroy(surface->wlEventQueue);
         surface->wlEventQueue = NULL;
